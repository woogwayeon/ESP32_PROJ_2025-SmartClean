로드셀(HX711) 캘리브레이션 및 구현 과정

프로젝트를 진행하면서 가장 핵심이자 가장 큰 문제였던 부분은 로드셀(HX711) 센서였다. 다시 생각해도 화가난다. 
처음에는 단순히 센서 하나 연결하고 무게를 읽어 DB로 보내면 되겠지.. 생각했지만, 
결과적으로는 이 한 부분 때문에 이틀 이상을 날렸고, 하드웨어 조립부터 코드 수정까지 진짜 지옥같은 시간을 보냈다.

HX711과 ESP32를 연결한 뒤, 예제 코드를 실행했을 때는 아무런 오류도 없었지만 출력값은 완전히 엉망이었다. 
물체를 기준추로 두는 로직 자체가 이해되지 않았다. 손으로 압력을 주면 수치가 달라져서 괜찮은 줄 알고 다른 부분을 진행하다가 크게 데였다. 우선 로드셀 조립부터 문제였다. 구매한 키트의 아크릴판이 로드셀 나사와 맞지 않아 하드웨어 구현만 밤을 새서 고민했다. 구글에 검색하고 유투브를 찾아보고 구매처를 뒤져보아도 도저히 알수가 없었따. 하루를 날리고 아크릴판은 쓸모가 없다는 것을 받아들이는 기간이 하루를 넘겼다. 문득 조립법을 깨달아 아크릴을 과감하게 포기하고 상자를 잘라 조립했다. 드디어 값이 잡혔고 무게추로 240g 캔을 사용해 캘리브레이션을 시작했다. 어느 때는 0.00~0.01g 정도만 바뀌었고, 때로는 마이너스 값으로 튀거나 손만 가까이 대도 값이 폭발적으로 변했다. 캘리브레이션 상수를 조정해도 의미가 없었고, 계속해서 0점이 안 맞는다, 값이 안 변한다를 반복했다.

하드웨어를 완성해서 코드 문제라고 생각했다. 그래서 HX711 예제들을 여러 개 돌려봤지만 결과는 똑같았다. 결국 하드웨어 문제일 수도 있겠다는 판단이 들었지만 연휴기간이었고 내겐 로드셀이 한개밖에 없었다. 모듈을 교체해보기도 하고 점퍼선도 바꿔보고 연결부도 수정해보았지만 달라지는 것은 없었고 여전히 측정오류가 존재했다. 이제 생각해보면 문제는 센서 자체가 아니라 로드셀의 설치 환경과 노이즈였다.

다시 하드웨어 조립을 시작했다. 정말 센서를 고정하는 과정에서도 어려움이 많았다. 하루가 다 지나도 측정값은 여전히 정상적이지 않았다. 처음에는 여러 방향으로 조립해보고 값을 측정했으나 시간관계상 이 부분에 더 투자하기엔 곤란했다. 결국 소심하게 고정시켰던 부분을 과감히 글루건으로 고정시켰다.  하드웨어를 다루는 게 이렇게 예민할 줄 몰랐다는 걸 그때 처음 깨달았다.

그 과정에서 나 자신도 점점 지쳐갔다. Serial 모니터에 찍히는 0.00 숫자 하나가 바뀌길 바라며 수십 번을 재시도했고, 결국엔 이건 시연용으로는 불가능하다는 결론에 도달했다. 그 순간에는 좌절감보다도 현실적인 판단이 필요했다. 그래서 최종적으로 무게 측정 자체를 직접적인 값으로 구현하지 않고, 로드셀 센서를 이용했다는 자체만으로 프로젝트를 이어 진행하기로 결정했다. 물체 감지만 되면 랜덤값을 발생시켜 db로 전송시키기로 마음억었다.

즉, 초음파 센서가 OPEN 상태를 감지하면 랜덤 무게값을 생성하고 서버로 전송하도록 구조를 바꿨다. 이로써 실제 무게는 정확하지 않더라도, 센서 → ESP32 → TCP 서버 → MySQL → JSP 웹 이라는 전체 흐름이 완성되었다. 비록 센서의 정확도는 확보하지 못했지만, 전체 통신 구조를 완성시키는 것이 더 중요하다고 판단했다. DB 저장, 웹 시각화까지 모두 정상 작동했다는 점에서 이 선택은 결과적으로 괜찮은 차선책이었다.

결국 로드셀의 정밀한 캘리브레이션은 구현하지 못했지만, 이 과정을 통해 얻은 경험은 훨씬 컸다. 단순히 “센서가 잘 작동한다 / 안 한다”의 문제가 아니라, 하드웨어 환경, 노이즈, 전원 안정성, 그리고 개발 일정 내 현실적 타협의 중요성을 배웠다. 무엇보다도 “모든 기능을 완벽히 구현하려고 하기보다, 전체 시스템이 동작하는 최소 단위부터 완성하는 게 더 중요하다”는 걸 깨달았다.

이 경험은 단순히 실패로 끝난 게 아니라, 하드웨어와 소프트웨어가 어떻게 맞물려야 하는지를 직접 체감한 첫 프로젝트였다. 코드는 완벽하지 않았지만, ‘센서에서 출발한 데이터가 서버를 거쳐 웹에 시각화된다’는 그 하나의 흐름만큼은 끝까지 완성해냈다는 점에서 의미가 있었다.
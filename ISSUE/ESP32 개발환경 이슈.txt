ESP32 개발환경 세팅 및 초기 통신 문제

ESP32를 처음 세팅할 때 가장 큰 문제는 맥(macOS) 환경에서의 연결과 인식이었다.  
Windows 기준으로는 자료가 많았지만, M1 프로세서에 대한 자료가 너무 부족했다. 
USB-Serial 드라이버 호환 문제로 보드를 연결해도 Arduino IDE에서 포트를 인식하지 못했다. 
터미널에서 ls /dev/tty.* 명령으로 확인했을 때도 Bluetooth-Incoming-Port 외에는  
아무 장치도 보이지 않아 원인 파악에 시간이 오래 걸렸다.

드라이버가 설치되지 않았던 것을 잡는데도 오래 걸렸다.. 일단 esp32 보드 종류에 따라 드라이버가 다르다는 걸 몰랐다.
그리고 내가 가진 보드가 어떤 드라이버를 설치해야 하는지도 몰랐다...
‘CP2102용’ 드라이버, ‘FTDI용’ 드라이버, ‘CH340용’ 드라이버를  
결국 하나하나 다 설치해봤는데 그러다 충돌오류가 떠서 삭제하는데도 시간을 오래 사용했다.
나중에서야 내가 사용 중인 ESP32 보드가 CH340 칩셋 기반이라는 걸 알게 되었다  
하.. macOS 보안 정책에 의해 차단되어 있었다.  
보안 및 개인정보 보호 > 일반 탭에 들어가서 차단된 CH340 드라이버 허용을 눌러야  
정상적으로 인식되었다.

그런데 모든 설정을 마쳤는데도 여전히 포트가 안 잡혔다.  
이때 진짜 원인은 너무 황당했다. USB 케이블이 데이터 전송용이 아니라 충전 전용 케이블이었다.
겉보기에는 똑같은 케이블이라 구분이 안 됐고, 드라이버 몇번 다시 설치해보다가 로켓배송으로 주문했다
데이터 전송이 가능한 케이블로 바꾸자마자, 그동안의 문제가 한 번에 해결됐다.

이후에는 “Failed to connect to ESP32: Timed out waiting for packet header”  
에러가 반복적으로 발생했다.   
업로드 속도(baud rate) 이슈였는데 기본값인 921600bps에서는 연결이 불안정했기 때문에,  
115200bps로 낮춰 안정적인 업로드 환경을 확보했다.  

포트 연결이 성공한 후에는 또 다른 문제로 이어졌다.  
맥 환경에서는 포트를 한 번이라도 비정상 종료하면,  
다음 업로드 시 "port busy" 에러가 뜨며 업로드가 불가능해졌다. ^^  
이때는 lsof /dev/cu.* 명령으로 점유 중인 프로세스를 찾아 kill 명령으로 종료해 해결했다.

이 초기 세팅 문제를 해결하면서 단순히 코드를 짜는 것보다  
“개발 환경을 다루는 능력”이 얼마나 중요한지 깨달았다.  
하드웨어가 인식되지 않으면 아무리 코드가 완벽해도 무용지물이다.  